// Mocks generated by Mockito 5.0.17 from annotations
// in citydanger/test/setup/test_helpers.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;
import 'dart:io' as _i9;
import 'dart:ui' as _i14;

import 'package:citydanger/models/issue_data_model.dart' as _i17;
import 'package:citydanger/models/user_data_model.dart' as _i5;
import 'package:citydanger/services/auth_service.dart' as _i12;
import 'package:citydanger/services/database.dart' as _i13;
import 'package:citydanger/services/issue_service.dart' as _i16;
import 'package:citydanger/services/media_service.dart' as _i7;
import 'package:citydanger/services/notification_service.dart' as _i19;
import 'package:citydanger/services/permission_service.dart' as _i3;
import 'package:firebase_auth/firebase_auth.dart' as _i6;
import 'package:flutter/material.dart' as _i11;
import 'package:get/get.dart' as _i15;
import 'package:image_picker/image_picker.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:permission_handler/permission_handler.dart' as _i18;
import 'package:stacked_services/src/snackbar/snackbar_config.dart' as _i10;
import 'package:stacked_services/stacked_services.dart' as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeImagePicker_0 extends _i1.Fake implements _i2.ImagePicker {}

class _FakePermissionService_1 extends _i1.Fake
    implements _i3.PermissionService {}

class _FakeSnackbarService_2 extends _i1.Fake implements _i4.SnackbarService {}

class _FakeUserData_3 extends _i1.Fake implements _i5.UserData {}

class _FakeUserCredential_4 extends _i1.Fake implements _i6.UserCredential {}

/// A class which mocks [MediaService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMediaService extends _i1.Mock implements _i7.MediaService {
  @override
  _i2.ImagePicker get picker => (super.noSuchMethod(Invocation.getter(#picker),
      returnValue: _FakeImagePicker_0()) as _i2.ImagePicker);
  @override
  _i3.PermissionService get permissionService =>
      (super.noSuchMethod(Invocation.getter(#permissionService),
          returnValue: _FakePermissionService_1()) as _i3.PermissionService);
  @override
  set permissionService(_i3.PermissionService? _permissionService) => super
      .noSuchMethod(Invocation.setter(#permissionService, _permissionService),
          returnValueForMissingStub: null);
  @override
  _i8.Future<_i9.File?> pickImageCertification() =>
      (super.noSuchMethod(Invocation.method(#pickImageCertification, []),
          returnValue: Future<_i9.File?>.value()) as _i8.Future<_i9.File?>);
}

/// A class which mocks [SnackbarService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSnackbarService extends _i1.Mock implements _i4.SnackbarService {
  @override
  void registerSnackbarConfig(_i10.SnackbarConfig? config) =>
      super.noSuchMethod(Invocation.method(#registerSnackbarConfig, [config]),
          returnValueForMissingStub: null);
  @override
  void registerCustomSnackbarconfig(
          {dynamic customData, _i10.SnackbarConfig? config}) =>
      super.noSuchMethod(
          Invocation.method(#registerCustomSnackbarconfig, [],
              {#customData: customData, #config: config}),
          returnValueForMissingStub: null);
  @override
  void registerCustomMainButtonBuilder(
          {dynamic variant,
          _i11.Widget Function(String?, Function?)? builder}) =>
      super.noSuchMethod(
          Invocation.method(#registerCustomMainButtonBuilder, [],
              {#variant: variant, #builder: builder}),
          returnValueForMissingStub: null);
  @override
  void registerCustomSnackbarConfig(
          {dynamic variant,
          _i10.SnackbarConfig? config,
          _i10.SnackbarConfig Function()? configBuilder}) =>
      super.noSuchMethod(
          Invocation.method(#registerCustomSnackbarConfig, [], {
            #variant: variant,
            #config: config,
            #configBuilder: configBuilder
          }),
          returnValueForMissingStub: null);
  @override
  void showSnackbar(
          {String? title = r'',
          String? message,
          dynamic Function(dynamic)? onTap,
          Duration? duration = const Duration(seconds: 3),
          String? mainButtonTitle,
          void Function()? onMainButtonTapped}) =>
      super.noSuchMethod(
          Invocation.method(#showSnackbar, [], {
            #title: title,
            #message: message,
            #onTap: onTap,
            #duration: duration,
            #mainButtonTitle: mainButtonTitle,
            #onMainButtonTapped: onMainButtonTapped
          }),
          returnValueForMissingStub: null);
  @override
  _i8.Future<dynamic>? showCustomSnackBar(
          {String? message,
          dynamic customData,
          dynamic variant,
          String? title,
          String? mainButtonTitle,
          void Function()? onMainButtonTapped,
          Function? onTap,
          Duration? duration = const Duration(seconds: 1)}) =>
      (super.noSuchMethod(Invocation.method(#showCustomSnackBar, [], {
        #message: message,
        #customData: customData,
        #variant: variant,
        #title: title,
        #mainButtonTitle: mainButtonTitle,
        #onMainButtonTapped: onMainButtonTapped,
        #onTap: onTap,
        #duration: duration
      })) as _i8.Future<dynamic>?);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i12.AuthService {
  @override
  _i4.SnackbarService get snackBarService =>
      (super.noSuchMethod(Invocation.getter(#snackBarService),
          returnValue: _FakeSnackbarService_2()) as _i4.SnackbarService);
  @override
  _i5.UserData get currentUser =>
      (super.noSuchMethod(Invocation.getter(#currentUser),
          returnValue: _FakeUserData_3()) as _i5.UserData);
  @override
  _i8.Future<bool> isUserLoggedIn() =>
      (super.noSuchMethod(Invocation.method(#isUserLoggedIn, []),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  _i8.Future<bool> registerWithEmailAndPassword(String? email, String? password,
          String? firstname, String? lastname, int? rewardPoints) =>
      (super.noSuchMethod(
          Invocation.method(#registerWithEmailAndPassword,
              [email, password, firstname, lastname, rewardPoints]),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  _i8.Future<bool> signIn(String? email, String? password) =>
      (super.noSuchMethod(Invocation.method(#signIn, [email, password]),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  _i8.Future<dynamic> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
          returnValue: Future<dynamic>.value()) as _i8.Future<dynamic>);
  @override
  _i8.Future<String?> sendEmailToResetPassword(String? email) =>
      (super.noSuchMethod(Invocation.method(#sendEmailToResetPassword, [email]),
          returnValue: Future<String?>.value()) as _i8.Future<String?>);
  @override
  _i8.Future<String> getCurrentUserUid() =>
      (super.noSuchMethod(Invocation.method(#getCurrentUserUid, []),
          returnValue: Future<String>.value('')) as _i8.Future<String>);
  @override
  _i8.Future<String> errorHandlingValidatePassword(
          dynamic error, dynamic ctx) =>
      (super.noSuchMethod(
          Invocation.method(#errorHandlingValidatePassword, [error, ctx]),
          returnValue: Future<String>.value('')) as _i8.Future<String>);
  @override
  _i8.Future<String> errorHandlingUpdatePassword(dynamic error, dynamic ctx) =>
      (super.noSuchMethod(
          Invocation.method(#errorHandlingUpdatePassword, [error, ctx]),
          returnValue: Future<String>.value('')) as _i8.Future<String>);
  @override
  bool returnFunction(dynamic value) =>
      (super.noSuchMethod(Invocation.method(#returnFunction, [value]),
          returnValue: false) as bool);
  @override
  _i8.Future<_i6.UserCredential> validatePassword(String? password) =>
      (super.noSuchMethod(Invocation.method(#validatePassword, [password]),
              returnValue:
                  Future<_i6.UserCredential>.value(_FakeUserCredential_4()))
          as _i8.Future<_i6.UserCredential>);
  @override
  _i8.Future<void> updatePassword(String? password) =>
      (super.noSuchMethod(Invocation.method(#updatePassword, [password]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<bool> signInAdmin(String? code) =>
      (super.noSuchMethod(Invocation.method(#signInAdmin, [code]),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  String hashRole(String? role) =>
      (super.noSuchMethod(Invocation.method(#hashRole, [role]), returnValue: '')
          as String);
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i13.DatabaseService {
  @override
  _i8.Future<void> updateUserData(Map<String, dynamic>? inputs) =>
      (super.noSuchMethod(Invocation.method(#updateUserData, [inputs]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<_i5.UserData> getUser(String? uid) =>
      (super.noSuchMethod(Invocation.method(#getUser, [uid]),
              returnValue: Future<_i5.UserData>.value(_FakeUserData_3()))
          as _i8.Future<_i5.UserData>);
}

/// A class which mocks [DialogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDialogService extends _i1.Mock implements _i4.DialogService {
  @override
  void registerCustomDialogBuilders(
          Map<dynamic, _i4.DialogBuilder>? builders) =>
      super.noSuchMethod(
          Invocation.method(#registerCustomDialogBuilders, [builders]),
          returnValueForMissingStub: null);
  @override
  void registerCustomDialogBuilder(
          {dynamic variant,
          _i11.Widget Function(_i11.BuildContext, _i4.DialogRequest<dynamic>,
                  dynamic Function(_i4.DialogResponse<dynamic>))?
              builder}) =>
      super.noSuchMethod(
          Invocation.method(#registerCustomDialogBuilder, [],
              {#variant: variant, #builder: builder}),
          returnValueForMissingStub: null);
  @override
  _i8.Future<_i4.DialogResponse<dynamic>?> showDialog(
          {String? title,
          String? description,
          String? cancelTitle,
          _i14.Color? cancelTitleColor,
          String? buttonTitle = r'Ok',
          _i14.Color? buttonTitleColor,
          bool? barrierDismissible = false,
          _i4.DialogPlatform? dialogPlatform}) =>
      (super.noSuchMethod(
              Invocation.method(#showDialog, [], {
                #title: title,
                #description: description,
                #cancelTitle: cancelTitle,
                #cancelTitleColor: cancelTitleColor,
                #buttonTitle: buttonTitle,
                #buttonTitleColor: buttonTitleColor,
                #barrierDismissible: barrierDismissible,
                #dialogPlatform: dialogPlatform
              }),
              returnValue: Future<_i4.DialogResponse<dynamic>?>.value())
          as _i8.Future<_i4.DialogResponse<dynamic>?>);
  @override
  _i8.Future<_i4.DialogResponse<T>?> showCustomDialog<T, R>(
          {dynamic variant,
          String? title,
          String? description,
          bool? hasImage = false,
          String? imageUrl,
          bool? showIconInMainButton = false,
          String? mainButtonTitle,
          bool? showIconInSecondaryButton = false,
          String? secondaryButtonTitle,
          bool? showIconInAdditionalButton = false,
          String? additionalButtonTitle,
          bool? takesInput = false,
          _i14.Color? barrierColor = const _i14.Color(2315255808),
          bool? barrierDismissible = false,
          String? barrierLabel = r'',
          dynamic customData,
          R? data}) =>
      (super.noSuchMethod(
              Invocation.method(#showCustomDialog, [], {
                #variant: variant,
                #title: title,
                #description: description,
                #hasImage: hasImage,
                #imageUrl: imageUrl,
                #showIconInMainButton: showIconInMainButton,
                #mainButtonTitle: mainButtonTitle,
                #showIconInSecondaryButton: showIconInSecondaryButton,
                #secondaryButtonTitle: secondaryButtonTitle,
                #showIconInAdditionalButton: showIconInAdditionalButton,
                #additionalButtonTitle: additionalButtonTitle,
                #takesInput: takesInput,
                #barrierColor: barrierColor,
                #barrierDismissible: barrierDismissible,
                #barrierLabel: barrierLabel,
                #customData: customData,
                #data: data
              }),
              returnValue: Future<_i4.DialogResponse<T>?>.value())
          as _i8.Future<_i4.DialogResponse<T>?>);
  @override
  _i8.Future<_i4.DialogResponse<dynamic>?> showConfirmationDialog(
          {String? title,
          String? description,
          String? cancelTitle = r'Cancel',
          String? confirmationTitle = r'Ok',
          bool? barrierDismissible = false,
          _i4.DialogPlatform? dialogPlatform}) =>
      (super.noSuchMethod(
              Invocation.method(#showConfirmationDialog, [], {
                #title: title,
                #description: description,
                #cancelTitle: cancelTitle,
                #confirmationTitle: confirmationTitle,
                #barrierDismissible: barrierDismissible,
                #dialogPlatform: dialogPlatform
              }),
              returnValue: Future<_i4.DialogResponse<dynamic>?>.value())
          as _i8.Future<_i4.DialogResponse<dynamic>?>);
  @override
  void completeDialog(_i4.DialogResponse<dynamic>? response) =>
      super.noSuchMethod(Invocation.method(#completeDialog, [response]),
          returnValueForMissingStub: null);
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i4.NavigationService {
  @override
  String get previousRoute =>
      (super.noSuchMethod(Invocation.getter(#previousRoute), returnValue: '')
          as String);
  @override
  String get currentRoute =>
      (super.noSuchMethod(Invocation.getter(#currentRoute), returnValue: '')
          as String);
  @override
  _i11.GlobalKey<_i11.NavigatorState>? nestedNavigationKey(int? index) =>
      (super.noSuchMethod(Invocation.method(#nestedNavigationKey, [index]))
          as _i11.GlobalKey<_i11.NavigatorState>?);
  @override
  void config(
          {bool? enableLog,
          bool? defaultPopGesture,
          bool? defaultOpaqueRoute,
          Duration? defaultDurationTransition,
          bool? defaultGlobalState,
          String? defaultTransition}) =>
      super.noSuchMethod(
          Invocation.method(#config, [], {
            #enableLog: enableLog,
            #defaultPopGesture: defaultPopGesture,
            #defaultOpaqueRoute: defaultOpaqueRoute,
            #defaultDurationTransition: defaultDurationTransition,
            #defaultGlobalState: defaultGlobalState,
            #defaultTransition: defaultTransition
          }),
          returnValueForMissingStub: null);
  @override
  _i8.Future<T?>? navigateWithTransition<T>(_i11.Widget? page,
          {bool? opaque,
          String? transition = r'',
          Duration? duration,
          bool? popGesture,
          int? id,
          _i11.Curve? curve,
          _i15.Bindings? binding,
          bool? fullscreenDialog = false,
          bool? preventDuplicates = true,
          _i15.Transition? transitionClass}) =>
      (super.noSuchMethod(Invocation.method(#navigateWithTransition, [
        page
      ], {
        #opaque: opaque,
        #transition: transition,
        #duration: duration,
        #popGesture: popGesture,
        #id: id,
        #curve: curve,
        #binding: binding,
        #fullscreenDialog: fullscreenDialog,
        #preventDuplicates: preventDuplicates,
        #transitionClass: transitionClass
      })) as _i8.Future<T?>?);
  @override
  _i8.Future<T?>? replaceWithTransition<T>(_i11.Widget? page,
          {bool? opaque,
          String? transition = r'',
          Duration? duration,
          bool? popGesture,
          int? id,
          _i11.Curve? curve,
          _i15.Bindings? binding,
          bool? fullscreenDialog = false,
          bool? preventDuplicates = true,
          _i15.Transition? transitionClass}) =>
      (super.noSuchMethod(Invocation.method(#replaceWithTransition, [
        page
      ], {
        #opaque: opaque,
        #transition: transition,
        #duration: duration,
        #popGesture: popGesture,
        #id: id,
        #curve: curve,
        #binding: binding,
        #fullscreenDialog: fullscreenDialog,
        #preventDuplicates: preventDuplicates,
        #transitionClass: transitionClass
      })) as _i8.Future<T?>?);
  @override
  bool back<T>({dynamic result, int? id}) => (super.noSuchMethod(
      Invocation.method(#back, [], {#result: result, #id: id}),
      returnValue: false) as bool);
  @override
  void popUntil(_i11.RoutePredicate? predicate) =>
      super.noSuchMethod(Invocation.method(#popUntil, [predicate]),
          returnValueForMissingStub: null);
  @override
  void popRepeated(int? popTimes) =>
      super.noSuchMethod(Invocation.method(#popRepeated, [popTimes]),
          returnValueForMissingStub: null);
  @override
  _i8.Future<T?>? navigateTo<T>(String? routeName,
          {dynamic arguments,
          int? id,
          bool? preventDuplicates = true,
          Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#navigateTo, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #preventDuplicates: preventDuplicates,
        #parameters: parameters
      })) as _i8.Future<T?>?);
  @override
  _i8.Future<T?>? navigateToView<T>(_i11.Widget? view,
          {dynamic arguments,
          int? id,
          bool? opaque,
          _i11.Curve? curve,
          _i15.Bindings? binding,
          Duration? duration,
          bool? fullscreenDialog = false,
          bool? popGesture,
          bool? preventDuplicates = true,
          _i15.Transition? transition}) =>
      (super.noSuchMethod(Invocation.method(#navigateToView, [
        view
      ], {
        #arguments: arguments,
        #id: id,
        #opaque: opaque,
        #curve: curve,
        #binding: binding,
        #duration: duration,
        #fullscreenDialog: fullscreenDialog,
        #popGesture: popGesture,
        #preventDuplicates: preventDuplicates,
        #transition: transition
      })) as _i8.Future<T?>?);
  @override
  _i8.Future<T?>? replaceWith<T>(String? routeName,
          {dynamic arguments,
          int? id,
          bool? preventDuplicates = true,
          Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#replaceWith, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #preventDuplicates: preventDuplicates,
        #parameters: parameters
      })) as _i8.Future<T?>?);
  @override
  _i8.Future<T?>? clearStackAndShow<T>(String? routeName,
          {dynamic arguments, int? id, Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#clearStackAndShow, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #parameters: parameters
      })) as _i8.Future<T?>?);
  @override
  _i8.Future<T?>? clearTillFirstAndShow<T>(String? routeName,
          {dynamic arguments,
          int? id,
          bool? preventDuplicates = true,
          Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#clearTillFirstAndShow, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #preventDuplicates: preventDuplicates,
        #parameters: parameters
      })) as _i8.Future<T?>?);
  @override
  _i8.Future<T?>? clearTillFirstAndShowView<T>(_i11.Widget? view,
          {dynamic arguments, int? id}) =>
      (super.noSuchMethod(Invocation.method(#clearTillFirstAndShowView, [view],
          {#arguments: arguments, #id: id})) as _i8.Future<T?>?);
  @override
  _i8.Future<T?>? pushNamedAndRemoveUntil<T>(String? routeName,
          {_i11.RoutePredicate? predicate, dynamic arguments, int? id}) =>
      (super.noSuchMethod(Invocation.method(#pushNamedAndRemoveUntil, [
        routeName
      ], {
        #predicate: predicate,
        #arguments: arguments,
        #id: id
      })) as _i8.Future<T?>?);
}

/// A class which mocks [BottomSheetService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBottomSheetService extends _i1.Mock
    implements _i4.BottomSheetService {
  @override
  void setCustomSheetBuilders(Map<dynamic, _i4.SheetBuilder>? builders) =>
      super.noSuchMethod(Invocation.method(#setCustomSheetBuilders, [builders]),
          returnValueForMissingStub: null);
  @override
  _i8.Future<_i4.SheetResponse<dynamic>?> showBottomSheet(
          {String? title,
          String? description,
          String? confirmButtonTitle = r'Ok',
          String? cancelButtonTitle,
          bool? enableDrag = true,
          bool? barrierDismissible = true,
          bool? isScrollControlled = false,
          Duration? exitBottomSheetDuration,
          Duration? enterBottomSheetDuration,
          bool? ignoreSafeArea}) =>
      (super.noSuchMethod(
              Invocation.method(#showBottomSheet, [], {
                #title: title,
                #description: description,
                #confirmButtonTitle: confirmButtonTitle,
                #cancelButtonTitle: cancelButtonTitle,
                #enableDrag: enableDrag,
                #barrierDismissible: barrierDismissible,
                #isScrollControlled: isScrollControlled,
                #exitBottomSheetDuration: exitBottomSheetDuration,
                #enterBottomSheetDuration: enterBottomSheetDuration,
                #ignoreSafeArea: ignoreSafeArea
              }),
              returnValue: Future<_i4.SheetResponse<dynamic>?>.value())
          as _i8.Future<_i4.SheetResponse<dynamic>?>);
  @override
  _i8.Future<_i4.SheetResponse<T>?> showCustomSheet<T, R>(
          {dynamic variant,
          String? title,
          String? description,
          bool? hasImage = false,
          String? imageUrl,
          bool? showIconInMainButton = false,
          String? mainButtonTitle,
          bool? showIconInSecondaryButton = false,
          String? secondaryButtonTitle,
          bool? showIconInAdditionalButton = false,
          String? additionalButtonTitle,
          bool? takesInput = false,
          _i14.Color? barrierColor = const _i14.Color(2315255808),
          bool? barrierDismissible = true,
          bool? isScrollControlled = false,
          String? barrierLabel = r'',
          dynamic customData,
          R? data,
          bool? enableDrag = true,
          Duration? exitBottomSheetDuration,
          Duration? enterBottomSheetDuration,
          bool? ignoreSafeArea}) =>
      (super.noSuchMethod(
              Invocation.method(#showCustomSheet, [], {
                #variant: variant,
                #title: title,
                #description: description,
                #hasImage: hasImage,
                #imageUrl: imageUrl,
                #showIconInMainButton: showIconInMainButton,
                #mainButtonTitle: mainButtonTitle,
                #showIconInSecondaryButton: showIconInSecondaryButton,
                #secondaryButtonTitle: secondaryButtonTitle,
                #showIconInAdditionalButton: showIconInAdditionalButton,
                #additionalButtonTitle: additionalButtonTitle,
                #takesInput: takesInput,
                #barrierColor: barrierColor,
                #barrierDismissible: barrierDismissible,
                #isScrollControlled: isScrollControlled,
                #barrierLabel: barrierLabel,
                #customData: customData,
                #data: data,
                #enableDrag: enableDrag,
                #exitBottomSheetDuration: exitBottomSheetDuration,
                #enterBottomSheetDuration: enterBottomSheetDuration,
                #ignoreSafeArea: ignoreSafeArea
              }),
              returnValue: Future<_i4.SheetResponse<T>?>.value())
          as _i8.Future<_i4.SheetResponse<T>?>);
  @override
  void completeSheet(_i4.SheetResponse<dynamic>? response) =>
      super.noSuchMethod(Invocation.method(#completeSheet, [response]),
          returnValueForMissingStub: null);
}

/// A class which mocks [IssueService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIssueService extends _i1.Mock implements _i16.IssueService {
  @override
  _i4.SnackbarService get snackbarService =>
      (super.noSuchMethod(Invocation.getter(#snackbarService),
          returnValue: _FakeSnackbarService_2()) as _i4.SnackbarService);
  @override
  int get issuesLimit =>
      (super.noSuchMethod(Invocation.getter(#issuesLimit), returnValue: 0)
          as int);
  @override
  set issuesLimit(int? _issuesLimit) =>
      super.noSuchMethod(Invocation.setter(#issuesLimit, _issuesLimit),
          returnValueForMissingStub: null);
  @override
  List<_i17.IssueDataModel> get issueData =>
      (super.noSuchMethod(Invocation.getter(#issueData),
          returnValue: <_i17.IssueDataModel>[]) as List<_i17.IssueDataModel>);
  @override
  bool get hasMoreIssues =>
      (super.noSuchMethod(Invocation.getter(#hasMoreIssues), returnValue: false)
          as bool);
  @override
  _i8.Future<String?> uploadImage(_i9.File? imageFile, String? uid) =>
      (super.noSuchMethod(Invocation.method(#uploadImage, [imageFile, uid]),
          returnValue: Future<String?>.value()) as _i8.Future<String?>);
  @override
  _i8.Future<void> uploadIssue(
          String? uid,
          String? description,
          _i9.File? imagePath,
          int? priority,
          String? state,
          double? longitude,
          double? latitude) =>
      (super.noSuchMethod(
          Invocation.method(#uploadIssue, [
            uid,
            description,
            imagePath,
            priority,
            state,
            longitude,
            latitude
          ]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> getAllIssues() =>
      (super.noSuchMethod(Invocation.method(#getAllIssues, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> changeState(String? uid, String? flag, String? imageUrl,
          int? index, String? userUid) =>
      (super.noSuchMethod(
          Invocation.method(
              #changeState, [uid, flag, imageUrl, index, userUid]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> deleteIssueImage(String? imageUrl) =>
      (super.noSuchMethod(Invocation.method(#deleteIssueImage, [imageUrl]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> deleteIssue(String? uid, String? imageUrl, int? index) =>
      (super.noSuchMethod(
          Invocation.method(#deleteIssue, [uid, imageUrl, index]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
}

/// A class which mocks [PermissionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionService extends _i1.Mock implements _i3.PermissionService {
  @override
  _i8.Future<bool> requestPermission(_i18.Permission? permission) =>
      (super.noSuchMethod(Invocation.method(#requestPermission, [permission]),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  _i8.Future<dynamic> checkPermission(
          {_i18.Permission? permission, bool? asString = false}) =>
      (super.noSuchMethod(
          Invocation.method(#checkPermission, [],
              {#permission: permission, #asString: asString}),
          returnValue: Future<dynamic>.value()) as _i8.Future<dynamic>);
}

/// A class which mocks [PushNotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPushNotificationService extends _i1.Mock
    implements _i19.PushNotificationService {
  @override
  _i8.Future<dynamic> initialise() =>
      (super.noSuchMethod(Invocation.method(#initialise, []),
          returnValue: Future<dynamic>.value()) as _i8.Future<dynamic>);
  @override
  _i8.Future<String?> getDeviceId() =>
      (super.noSuchMethod(Invocation.method(#getDeviceId, []),
          returnValue: Future<String?>.value()) as _i8.Future<String?>);
}
